import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.flywaydb.flyway' version '11.13.2'

    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.14'

    id "org.sonarqube" version "6.3.1.5724"
}

group = 'api'
version = '0.0.1-SNAPSHOT'
description = 'carpooling'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springAiVersion', "1.0.1")
    set('logstash', '7.3')

    set('checkstyleVersion', '10.12.0')
    set('pmdVersion', '7.17.0')
    set('jacocoVersion', '0.8.10')
    set('spotbugsVersion', '4.9.4')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation "net.logstash.logback:logstash-logback-encoder:$logstash"
    implementation "org.mapstruct:mapstruct:1.6.3"
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.6'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

checkstyle {
    toolVersion = "${checkstyleVersion}"
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

pmd {
    toolVersion = "${pmdVersion}"
    ruleSets = []
    ruleSetFiles = files('config/pmd/ruleset.xml')
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
    effort = "max"
    reportLevel = "medium"
}

tasks.withType(SpotBugsTask).configureEach {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

tasks.named('check') {
    dependsOn 'checkstyleMain', 'checkstyleTest'
    dependsOn 'pmdMain', 'pmdTest'
    dependsOn 'spotbugsMain', 'spotbugsTest'
    dependsOn 'jacocoTestReport'
}

tasks.register('javadocWithTests', Javadoc) {
    source = sourceSets.main.allJava + sourceSets.test.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    destinationDir = file("${buildDir}/docs/javadoc-with-tests")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}


sonar {
    properties {
        property "sonar.projectKey", "checkout_organisation-diallo01"
        property "sonar.organization", "organisation-diallo"
    }
}
